// <auto-generated />
using System;
using Dmail.Data.Entities;
using Dmail.Data.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dmail.Data.Migrations
{
    [DbContext(typeof(DmailContext))]
    [Migration("20230106220845_attempt4-part2")]
    partial class attempt4part2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "event_answer", new[] { "none", "accepted", "rejected" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dmail.Data.Entities.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("boolean");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Pomoc pls",
                            CreatedAt = new DateTime(2020, 8, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEvent = false,
                            SenderId = 1,
                            Title = "Pomoc"
                        },
                        new
                        {
                            Id = 2,
                            Body = "E mos mi kupit miljeko zaboravia san",
                            CreatedAt = new DateTime(2022, 8, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEvent = false,
                            SenderId = 3,
                            Title = "Kupovina"
                        },
                        new
                        {
                            Id = 3,
                            Body = "Čestitamo osvojili ste besplatni Iphone 14 da prmiite nagradu samo nam dajte vaš matični broj, oib, pin kartice, sve brojeve vezane uz karticu, adresu, legalno ime...",
                            CreatedAt = new DateTime(2021, 3, 23, 23, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEvent = false,
                            SenderId = 8,
                            Title = "Nagrada"
                        },
                        new
                        {
                            Id = 4,
                            Body = "",
                            CreatedAt = new DateTime(2021, 8, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(2023, 1, 30, 23, 0, 0, 0, DateTimeKind.Utc),
                            IsEvent = true,
                            SenderId = 5,
                            Title = "JanVsJan"
                        },
                        new
                        {
                            Id = 5,
                            Body = "",
                            CreatedAt = new DateTime(2023, 1, 1, 23, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(2023, 1, 14, 18, 0, 0, 0, DateTimeKind.Utc),
                            IsEvent = true,
                            SenderId = 2,
                            Title = "Dump predavanje 8"
                        },
                        new
                        {
                            Id = 6,
                            Body = "Hello I would like to apply to dump internship, I will also send you my resume",
                            CreatedAt = new DateTime(2022, 12, 11, 23, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEvent = false,
                            SenderId = 7,
                            Title = "Job application"
                        },
                        new
                        {
                            Id = 7,
                            Body = "Resume: I have succesfully opened visual studio once",
                            CreatedAt = new DateTime(2022, 12, 12, 23, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEvent = false,
                            SenderId = 6,
                            Title = "Resume"
                        },
                        new
                        {
                            Id = 8,
                            Body = "",
                            CreatedAt = new DateTime(2020, 8, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(2023, 1, 12, 23, 0, 0, 0, DateTimeKind.Utc),
                            IsEvent = false,
                            SenderId = 4,
                            Title = "Job Interview"
                        },
                        new
                        {
                            Id = 9,
                            Body = "S obziron na pad kvalitete tvohij domaćih Jane, moram te nažalost obavijestiti da smo došli do odluke da te izbacimo s dump internshipa. Možeš još pratiti predavanja ali nećeš moći sudjelovati u Ic cupu i više ti se neće moći pregledavati domaći.",
                            CreatedAt = new DateTime(2022, 12, 29, 23, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEvent = false,
                            SenderId = 4,
                            Title = "Obavijest o kicku"
                        },
                        new
                        {
                            Id = 10,
                            Body = "Wow can you send emails to yourself thats cool",
                            CreatedAt = new DateTime(2023, 1, 1, 23, 0, 0, 0, DateTimeKind.Utc),
                            DateOfEvent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEvent = false,
                            SenderId = 10,
                            Title = "Help"
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.MessagesReceivers", b =>
                {
                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<EventAnswer>("Answer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("event_answer")
                        .HasDefaultValue(EventAnswer.None);

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.HasKey("ReceiverId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessagesReceivers");

                    b.HasData(
                        new
                        {
                            ReceiverId = 2,
                            MessageId = 1,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 5,
                            MessageId = 2,
                            Answer = EventAnswer.None,
                            Read = false
                        },
                        new
                        {
                            ReceiverId = 7,
                            MessageId = 3,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 1,
                            MessageId = 3,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 2,
                            MessageId = 3,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 1,
                            MessageId = 4,
                            Answer = EventAnswer.Accepted,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 2,
                            MessageId = 4,
                            Answer = EventAnswer.Rejected,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 4,
                            MessageId = 4,
                            Answer = EventAnswer.None,
                            Read = false
                        },
                        new
                        {
                            ReceiverId = 5,
                            MessageId = 5,
                            Answer = EventAnswer.Accepted,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 4,
                            MessageId = 5,
                            Answer = EventAnswer.Accepted,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 6,
                            MessageId = 5,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 2,
                            MessageId = 6,
                            Answer = EventAnswer.None,
                            Read = false
                        },
                        new
                        {
                            ReceiverId = 4,
                            MessageId = 6,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 7,
                            MessageId = 7,
                            Answer = EventAnswer.None,
                            Read = false
                        },
                        new
                        {
                            ReceiverId = 4,
                            MessageId = 7,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 7,
                            MessageId = 8,
                            Answer = EventAnswer.None,
                            Read = false
                        },
                        new
                        {
                            ReceiverId = 1,
                            MessageId = 9,
                            Answer = EventAnswer.None,
                            Read = true
                        },
                        new
                        {
                            ReceiverId = 10,
                            MessageId = 10,
                            Answer = EventAnswer.None,
                            Read = false
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Spam", b =>
                {
                    b.Property<int>("BlockerId")
                        .HasColumnType("integer");

                    b.Property<int>("Blocked")
                        .HasColumnType("integer");

                    b.HasKey("BlockerId", "Blocked");

                    b.ToTable("Spam");

                    b.HasData(
                        new
                        {
                            BlockerId = 2,
                            Blocked = 8
                        },
                        new
                        {
                            BlockerId = 4,
                            Blocked = 8
                        },
                        new
                        {
                            BlockerId = 2,
                            Blocked = 7
                        },
                        new
                        {
                            BlockerId = 1,
                            Blocked = 5
                        },
                        new
                        {
                            BlockerId = 2,
                            Blocked = 5
                        },
                        new
                        {
                            BlockerId = 4,
                            Blocked = 5
                        },
                        new
                        {
                            BlockerId = 2,
                            Blocked = 1
                        },
                        new
                        {
                            BlockerId = 7,
                            Blocked = 8
                        },
                        new
                        {
                            BlockerId = 6,
                            Blocked = 2
                        },
                        new
                        {
                            BlockerId = 5,
                            Blocked = 2
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("_password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Jan@gmail.com",
                            _password = "janv2"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bartol@dump.hr",
                            _password = "bartolV10"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Marko@markovi.markic",
                            _password = "marko"
                        },
                        new
                        {
                            Id = 4,
                            Email = "Duje@dump.hr",
                            _password = "Kick"
                        },
                        new
                        {
                            Id = 5,
                            Email = "Janko@gmail.com",
                            _password = "janv1"
                        },
                        new
                        {
                            Id = 6,
                            Email = "bart@dump.hr",
                            _password = "bartV10"
                        },
                        new
                        {
                            Id = 7,
                            Email = "Mao@yahoo.com",
                            _password = "mao"
                        },
                        new
                        {
                            Id = 8,
                            Email = "Fake@fakeemail.fakecountry",
                            _password = "Fake"
                        },
                        new
                        {
                            Id = 9,
                            Email = "Empty@empty.empty",
                            _password = "Empty"
                        },
                        new
                        {
                            Id = 10,
                            Email = "User@adress.domain",
                            _password = "Password"
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Message", b =>
                {
                    b.HasOne("Dmail.Data.Entities.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.MessagesReceivers", b =>
                {
                    b.HasOne("Dmail.Data.Entities.Models.Message", "Message")
                        .WithMany("MessagesReceivers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dmail.Data.Entities.Models.User", "Receiver")
                        .WithMany("MessagesReceivers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Spam", b =>
                {
                    b.HasOne("Dmail.Data.Entities.Models.User", "Blocker")
                        .WithMany("Spams")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Message", b =>
                {
                    b.Navigation("MessagesReceivers");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("MessagesReceivers");

                    b.Navigation("Spams");
                });
#pragma warning restore 612, 618
        }
    }
}
